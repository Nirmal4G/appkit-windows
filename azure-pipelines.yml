trigger:
- main
- dev/*
- rel/*

pr:
- main
- dev/*
- rel/*

pool:
  vmImage: windows-latest

variables:
  Build.Configuration: Release
  Build.Directory: ~build\
  Packages.Directory: ~packages\

jobs:

### Build and Test Solution ###
- job: BuildBits
  displayName: Build and Test Solution
  timeoutInMinutes: 60
  variables:
    Build.Solution: CommunityToolkit.Windows.sln

  steps:
  # Set Build Version
  - script: nbgv cloud
    displayName: Set Build version

  # Verify headers
  - pwsh: build\Update-Headers.ps1 -Verify
    displayName: Verify headers

  # Restore solution
  - task: VSBuild@1
    displayName: Restore solution
    inputs:
      solution: $(Build.Solution)
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      msbuildArchitecture: x64
      msbuildArgs: "-t:Restore"

  # Build solution
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: $(Build.Solution)
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      msbuildArchitecture: x64
      msbuildArgs: "-t:Build"

  ### Test solution ###

  # Run .NET Core Unit tests
  - task: VSTest@2
    displayName: Run .NET Core Unit tests
    inputs:
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      runSettingsFile: .runsettings
      searchFolder: $(Build.Directory)
      testAssemblyVer2: '**\bin\**\UnitTests*NetCore.dll'
      otherConsoleOptions: '/Logger:trx;LogFileName=VSTestResults.NetCore.trx'

  # Run UWP Unit tests
  - task: VSTest@2
    displayName: Run UWP Unit tests
    inputs:
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      runSettingsFile: .runsettings
      searchFolder: $(Build.Directory)
      testAssemblyVer2: '**\bin\**\UnitTests*UWP.build.appxrecipie'
      otherConsoleOptions: '/Logger:trx;LogFileName=VSTestResults.UWP.trx'

  # Run MSTest UI tests
  - task: VSTest@2
    displayName: Run MSTest UI tests
    inputs:
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      runSettingsFile: .runsettings
      searchFolder: $(Build.Directory)
      testAssemblyVer2: '**\bin\**\UITests*MSTest.dll'
      otherConsoleOptions: '/Logger:trx;LogFileName=VSTestResults.UWP.UI.trx'
      uiTests: true

  # Run TAEF UI tests
  - script: build\Run-UITests.ps1
    displayName: Run TAEF UI tests
    enabled: no

  # Run TAEF UI tests
  - task: VSBuild@1
    displayName: Run TAEF UI tests
    inputs:
      solution: $(Build.Solution)
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      msbuildArchitecture: x64
      msbuildArgs: "-t:RunUITests"

  # Publish TAEF test results
  - publish: $(Build.Directory)UITests*\**\*.wtl
    displayName: Publish TAEF test results
    artifact: WexUITestResults
    condition: always()

  # Publish TAEF test logs
  - publish: $(Build.Directory)UITests*\**\WexLogFileOutput
    displayName: Publish TAEF test logs
    artifact: WexLogFileOutput
    condition: failed()

  # Pack solution
  - task: VSBuild@1
    displayName: Pack solution
    inputs:
      solution: $(Build.Solution)
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      msbuildArchitecture: x64
      msbuildArgs: "-t:Pack"

  # Sign packages
  - pwsh: build\Sign-Package.ps1
    displayName: Sign packages
    env:
      SignClientUser: $(SignClientUser)
      SignClientSecret: $(SignClientSecret)
      ArtifactDirectory: $(Packages.Directory)bin
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['SignClientUser'], ''), ne(variables['SignClientSecret'], ''))

  # Publish build artifacts
  - publish: $(Packages.Directory)bin
    artifact: Packages
    displayName: Publish package artifacts

### Run Smoke Tests on Generated Packages ###
- job: SmokeTests
  displayName: Run Smoke Tests on Generated Packages
  dependsOn: BuildBits
  timeoutInMinutes: 60
  variables:
    Build.Solution: SmokeTests\SmokeTest.sln
    Build.Project: SmokeTests\SmokeTests.proj

  steps:
  # Set Build Version
  - script: nbgv cloud
    displayName: Set Build version

  # Download Published packages
  - task: DownloadPipelineArtifact@2
    displayName: Download NuGet Packages
    inputs:
      artifact: Packages
      path: $(Packages.Directory)bin

  # Restore solution
  - task: VSBuild@1
    displayName: Restore solution
    inputs:
      solution: $(Build.Solution)
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      msbuildArchitecture: x64
      msbuildArgs: "-t:Restore"

  # Run Smoke tests
  - task: VSBuild@1
    displayName: Run Smoke tests
    inputs:
      solution: $(Build.Project)
      configuration: $(Build.Configuration)
      maximumCpuCount: true
      msbuildArchitecture: x64
      msbuildArgs: "-t:RunSmokeTests"

  # Analyze Package size
  - pwsh: SmokeTests\SmokeTest_AnalyzePackages.ps1
    displayName: Analyze Package Size

  # Copy files to Artifacts directory
  - task: CopyFiles@2
    inputs:
      sourceFolder: SmokeTests\AppPackages
      contents: '**\*.msixbundle'
      targetFolder: $(Build.StagingDirectory)\SmokeTestBundles
      cleanTargetFolder: yes
      preserveTimestamp: yes

  # Publish smoke test artifacts
  - publish: $(Build.StagingDirectory)\SmokeTestBundles
    artifact: SmokeTestBundles
    displayName: Publish smoke test artifacts
